#!/usr/bin/env python2

import os
import re
import sys
import argparse
import datetime
import atexit

import rcdb

from MyaData import MyaData

cli = argparse.ArgumentParser(description='Extract run averages for a PV from Mya EPICS archive.')
cli.add_argument('-start',metavar='RUN# or YYYY-MM-DD_HH:MM:SS',help='start date',type=str,required=True)
cli.add_argument('-end',metavar='RUN# or YYYY-MM-DD_HH:MM:SS',help='end date',type=str,required=True)
cli.add_argument('-pv',help='PV name',type=str,required=True)

args=cli.parse_args(sys.argv[1:])

db = None
def get_rcdb_time(run, varname):
  global db
  if db is None:
    db = rcdb.RCDBProvider('mysql://rcdb@clasdb.jlab.org/rcdb')
  try:
    return db.get_condition(run, varname).value.strftime('%Y-%m-%d_%H:%M:%S')
  except:
    cli.error('run number %d does not have a valid %s time in RCDB'%(run,varname))

# use RCDB to get start/end time if args.start is an integer:
try:
  args.start = get_rcdb_time(int(args.start), 'run_start_time')
  print('INFO:  assuming -start is a run number.')
except ValueError:
  pass
try:
  args.end = get_rcdb_time(int(args.end), 'run_end_time')
  print('INFO:  assuming -end is a run number.')
except ValueError:
  pass

# check timestamp format before calling mya:
fmt='^\d\d\d\d-\d\d-\d\d_\d\d:\d\d:\d\d$'
if re.match(fmt, args.start) is None:
  cli.error('Invalid -start format (must be RUN# or YYYY-MM-DD_HH:MM:SS): '+args.start)
if re.match(fmt, args.end) is None:
  cli.error('Invalid -end date format (must be RUN# or YYYY-MM-DD_HH:MM:SS): '+args.end)

# mya wants a space in the middle of a single argument:
args.start = args.start.replace('_',' ')
args.end = args.end.replace('_',' ')

myaData = MyaData(args.start,args.end)
myaData.addPv('B_DAQ:run_number')
myaData.addPv(args.pv)

runs = {}

for d in myaData.get():
  try:
    r = int(d.getValue('B_DAQ:run_number'))
    if r not in runs:
      runs[r] = []
    runs[r].append(float(d.getValue(args.pv)))
  except:
    pass

for r,v in runs.items():
  if len(v) > 0:
    print('%7d %.5f'%(r,sum(v)/len(v)))

